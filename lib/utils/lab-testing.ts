/**
 * Lab Testing Utility Functions
 */

import type { Lab } from '../data/labs-database'
import type {
  InterpretationInput,
  InterpretationResult,
  AgeRange,
  LabResult
} from '../types/lab-testing'

/**
 * Filter labs by city
 */
export function filterLabsByCity(labs: Lab[], city: string): Lab[] {
  if (city === 'all') return labs
  return labs.filter(lab => lab.city === city)
}

/**
 * Search labs by name or address
 */
export function searchLabs(labs: Lab[], query: string): Lab[] {
  if (!query.trim()) return labs

  const lowerQuery = query.toLowerCase()
  return labs.filter(lab =>
    lab.name.toLowerCase().includes(lowerQuery) ||
    lab.address.toLowerCase().includes(lowerQuery)
  )
}

/**
 * Get age range for interpretation
 */
export function getAgeRange(age: number): AgeRange {
  if (age <= 30) return '20-30'
  if (age <= 40) return '30-40'
  if (age <= 50) return '40-50'
  return '50+'
}

/**
 * Interpret testosterone results based on age
 */
export function interpretResults(input: InterpretationInput): InterpretationResult {
  const ageRange = getAgeRange(input.age)

  // Age-specific reference ranges
  const ranges: Record<AgeRange, { optimal: [number, number], low: number }> = {
    '20-30': { optimal: [600, 900], low: 300 },
    '30-40': { optimal: [500, 800], low: 270 },
    '40-50': { optimal: [450, 700], low: 250 },
    '50+': { optimal: [400, 600], low: 230 }
  }

  const range = ranges[ageRange]
  const [optimalMin, optimalMax] = range.optimal

  // Determine overall status
  let status: 'optimal' | 'suboptimal' | 'low'
  let statusLabel: string
  let totalTStatus: string

  if (input.total_t < range.low) {
    status = 'low'
    statusLabel = '–ù–∏—Å—ä–∫'
    totalTStatus = `${input.total_t} ng/dL - –ù–ò–°–™–ö (–ø–æ–¥ ${range.low} ng/dL)`
  } else if (input.total_t < optimalMin) {
    status = 'suboptimal'
    statusLabel = '–°—É–±–æ–ø—Ç–∏–º–∞–ª–µ–Ω'
    totalTStatus = `${input.total_t} ng/dL - –°—É–±–æ–ø—Ç–∏–º–∞–ª–µ–Ω (–ø–æ–¥ –æ–ø—Ç–∏–º–∞–ª–Ω–∏—è ${optimalMin}-${optimalMax} ng/dL)`
  } else if (input.total_t <= optimalMax) {
    status = 'optimal'
    statusLabel = '–û–ø—Ç–∏–º–∞–ª–µ–Ω'
    totalTStatus = `${input.total_t} ng/dL - –û–ü–¢–ò–ú–ê–õ–ï–ù`
  } else {
    status = 'optimal'
    statusLabel = '–ù–∞–¥ –æ–ø—Ç–∏–º–∞–ª–Ω–∏—è'
    totalTStatus = `${input.total_t} ng/dL - –ù–ê–î –æ–ø—Ç–∏–º–∞–ª–Ω–∏—è ${optimalMin}-${optimalMax} ng/dL`
  }

  // Free T interpretation (optional)
  let freeTStatus: string | undefined
  if (input.free_t !== undefined) {
    if (input.free_t < 9) {
      freeTStatus = `${input.free_t} pg/mL - –ù–ò–°–™–ö (–Ω–æ—Ä–º–∞: 9-30 pg/mL)`
    } else if (input.free_t <= 30) {
      freeTStatus = `${input.free_t} pg/mL - –ù–æ—Ä–º–∞–ª–µ–Ω`
    } else {
      freeTStatus = `${input.free_t} pg/mL - –ù–ê–î –Ω–æ—Ä–º–∞—Ç–∞`
    }
  }

  // SHBG interpretation (optional)
  let shbgStatus: string | undefined
  if (input.shbg !== undefined) {
    if (input.shbg < 10) {
      shbgStatus = `${input.shbg} nmol/L - –ù–ò–°–™–ö (–º–æ–∂–µ –¥–∞ –Ω–∞–º–∞–ª–∏ Free T)`
    } else if (input.shbg <= 50) {
      shbgStatus = `${input.shbg} nmol/L - –ù–æ—Ä–º–∞–ª–µ–Ω`
    } else {
      shbgStatus = `${input.shbg} nmol/L - –í–ò–°–û–ö (–Ω–∞–º–∞–ª—è–≤–∞ Free T)`
    }
  }

  // Estradiol interpretation (optional)
  let estradiolStatus: string | undefined
  if (input.estradiol !== undefined) {
    if (input.estradiol < 10) {
      estradiolStatus = `${input.estradiol} pg/mL - –ù–ò–°–™–ö`
    } else if (input.estradiol <= 40) {
      estradiolStatus = `${input.estradiol} pg/mL - –û–ø—Ç–∏–º–∞–ª–µ–Ω`
    } else {
      estradiolStatus = `${input.estradiol} pg/mL - –í–ò–°–û–ö (–º–æ–∂–µ –¥–∞ —Å–µ –Ω—É–∂–¥–∞–µ –æ—Ç –∫–æ–Ω—Ç—Ä–æ–ª)`
    }
  }

  // LH interpretation (optional)
  let lhStatus: string | undefined
  if (input.lh !== undefined) {
    if (input.lh < 1.5) {
      lhStatus = `${input.lh} mIU/mL - –ù–ò–°–™–ö (–º–æ–∂–µ –¥–∞ –∏–º–∞ –ø—Ä–æ–±–ª–µ–º —Å —Ö–∏–ø–æ—Ñ–∏–∑–∞—Ç–∞)`
    } else if (input.lh <= 9.3) {
      lhStatus = `${input.lh} mIU/mL - –ù–æ—Ä–º–∞–ª–µ–Ω`
    } else {
      lhStatus = `${input.lh} mIU/mL - –í–ò–°–û–ö (–≤—ä–∑–º–æ–∂–Ω–∞ –ø—ä—Ä–≤–∏—á–Ω–∞ —Ö–∏–ø–æ–≥–æ–Ω–∞–¥–∏–∑—ä–º)`
    }
  }

  // Prolactin interpretation (optional)
  let prolactinStatus: string | undefined
  if (input.prolactin !== undefined) {
    if (input.prolactin < 2) {
      prolactinStatus = `${input.prolactin} ng/mL - –ù–ò–°–™–ö`
    } else if (input.prolactin <= 18) {
      prolactinStatus = `${input.prolactin} ng/mL - –ù–æ—Ä–º–∞–ª–µ–Ω`
    } else {
      prolactinStatus = `${input.prolactin} ng/mL - –í–ò–°–û–ö (–∏–Ω—Ö–∏–±–∏—Ä–∞ —Ç–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω)`
    }
  }

  // FSH interpretation (optional)
  let fshStatus: string | undefined
  if (input.fsh !== undefined) {
    if (input.fsh < 1.5) {
      fshStatus = `${input.fsh} mIU/mL - –ù–ò–°–™–ö`
    } else if (input.fsh <= 12.4) {
      fshStatus = `${input.fsh} mIU/mL - –ù–æ—Ä–º–∞–ª–µ–Ω`
    } else {
      fshStatus = `${input.fsh} mIU/mL - –í–ò–°–û–ö (–≤—ä–∑–º–æ–∂–Ω–∞ –ø—ä—Ä–≤–∏—á–Ω–∞ —Ö–∏–ø–æ–≥–æ–Ω–∞–¥–∏–∑—ä–º)`
    }
  }

  // DHT interpretation (optional)
  let dhtStatus: string | undefined
  if (input.dht !== undefined) {
    if (input.dht < 30) {
      dhtStatus = `${input.dht} pg/mL - –ù–ò–°–™–ö`
    } else if (input.dht <= 85) {
      dhtStatus = `${input.dht} pg/mL - –û–ø—Ç–∏–º–∞–ª–µ–Ω`
    } else {
      dhtStatus = `${input.dht} pg/mL - –í–ò–°–û–ö`
    }
  }

  // Cortisol interpretation (optional)
  let cortisolStatus: string | undefined
  if (input.cortisol !== undefined) {
    if (input.cortisol < 6) {
      cortisolStatus = `${input.cortisol} ¬µg/dL - –ù–ò–°–™–ö (–Ω–∞–¥–±—ä–±—Ä–µ—á–Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ—Å—Ç)`
    } else if (input.cortisol <= 18) {
      cortisolStatus = `${input.cortisol} ¬µg/dL - –ù–æ—Ä–º–∞–ª–µ–Ω`
    } else {
      cortisolStatus = `${input.cortisol} ¬µg/dL - –í–ò–°–û–ö (—Ö—Ä–æ–Ω–∏—á–µ–Ω —Å—Ç—Ä–µ—Å)`
    }
  }

  // Generate recommendations
  const recommendations = generateRecommendations(status, input)

  return {
    status,
    statusLabel,
    totalTStatus,
    freeTStatus,
    shbgStatus,
    estradiolStatus,
    lhStatus,
    prolactinStatus,
    fshStatus,
    dhtStatus,
    cortisolStatus,
    ageRange,
    optimalRange: range.optimal,
    recommendations
  }
}

/**
 * Generate personalized recommendations
 */
function generateRecommendations(
  status: 'optimal' | 'suboptimal' | 'low',
  input: InterpretationInput
): string[] {
  const recs: string[] = []

  if (status === 'low') {
    recs.push('üî¥ –ö–æ–Ω—Å—É–ª—Ç–∞—Ü–∏—è —Å –µ–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥ –µ –ø—Ä–µ–ø–æ—Ä—ä—á–∏—Ç–µ–ª–Ω–∞')
    recs.push('–§–æ–∫—É—Å –≤—ä—Ä—Ö—É –æ—Å–Ω–æ–≤–Ω–∏—Ç–µ: —Å—ä–Ω 7-9 —á–∞—Å–∞, —Ç–µ–∂–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, —Ö—Ä–∞–Ω–∞ —Å –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ –º–∞–∑–Ω–∏–Ω–∏')
    recs.push('–ò–∑–±—è–≥–≤–∞–π –∞–ª–∫–æ—Ö–æ–ª, –æ–±—Ä–∞–±–æ—Ç–µ–Ω–∞ —Ö—Ä–∞–Ω–∞ –∏ —Å—Ç—Ä–µ—Å')
  } else if (status === 'suboptimal') {
    recs.push('üü° –ò–º–∞ –º—è—Å—Ç–æ –∑–∞ –ø–æ–¥–æ–±—Ä–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª–Ω–∏ –Ω–∞–≤–∏—Ü–∏')
    recs.push('–£–≤–µ–ª–∏—á–∏ –ø—Ä–∏–µ–º–∞ –Ω–∞ —Ü–∏–Ω–∫ (15-30 –º–≥), –≤–∏—Ç–∞–º–∏–Ω D3 (4000 IU) –∏ –º–∞–≥–Ω–µ–∑–∏–π (400 –º–≥)')
    recs.push('–î–æ–±–∞–≤–∏ compound —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: –∫–ª—è–∫–∞–Ω–∏—è, –º—ä—Ä—Ç–≤–∞ —Ç—è–≥–∞, –ª–µ–∂–∞–Ω–∫–∞')
    recs.push('–û–ø—Ç–∏–º–∏–∑–∏—Ä–∞–π —Å—ä–Ω—è: 7-9 —á–∞—Å–∞, —Ç—ä–º–Ω–∞ —Å—Ç–∞—è, –±–µ–∑ –µ–∫—Ä–∞–Ω–∏ 2 —á–∞—Å–∞ –ø—Ä–µ–¥–∏ —Å—ä–Ω')
  } else {
    recs.push('üü¢ –û—Ç–ª–∏—á–µ–Ω —Ä–µ–∑—É–ª—Ç–∞—Ç! –ü—Ä–æ–¥—ä–ª–∂–∞–≤–∞–π –≤ —Å—ä—â–∞—Ç–∞ –ø–æ—Å–æ–∫–∞')
    recs.push('–ü–æ–¥–¥—ä—Ä–∂–∞–π —Ä–µ–¥–æ–≤–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω —Å—ä–Ω')
    recs.push('–°–ª–µ–¥–∏ –Ω–∏–≤–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ (–Ω–∞ –≤—Å–µ–∫–∏ 3-6 –º–µ—Å–µ—Ü–∞)')
  }

  // SHBG specific
  if (input.shbg !== undefined && input.shbg > 50) {
    recs.push('‚ö†Ô∏è –í–∏—Å–æ–∫–æ—Ç–æ SHBG –Ω–∞–º–∞–ª—è–≤–∞ —Å–≤–æ–±–æ–¥–Ω–∏—è —Ç–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω. –ü–æ–º–∞–≥–∞—Ç: –±–æ—Ä, –∫—Ä–∞–ø–∏–≤–∞, –º–∞–≥–Ω–µ–∑–∏–π')
  }

  // Estradiol specific
  if (input.estradiol !== undefined && input.estradiol > 40) {
    recs.push('‚ö†Ô∏è –í–∏—Å–æ–∫–∏—è—Ç –µ—Å—Ç—Ä–∞–¥–∏–æ–ª –º–æ–∂–µ –¥–∞ —Å–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–∞ —Å –¥–æ–±–∞–≤–∫–∏: DIM, —Ü–∏–Ω–∫, –≤–∏—Ç–∞–º–∏–Ω E')
  }

  // Prolactin specific
  if (input.prolactin !== undefined && input.prolactin > 18) {
    recs.push('‚ö†Ô∏è –í–∏—Å–æ–∫–∏—è—Ç –ø—Ä–æ–ª–∞–∫—Ç–∏–Ω –∏–Ω—Ö–∏–±–∏—Ä–∞ —Ç–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω. –ü–æ–º–∞–≥–∞: –≤–∏—Ç–∞–º–∏–Ω B6, –≤–∏—Ç–µ–∫—Å, –Ω–∞–º–∞–ª—è–≤–∞–Ω–µ –Ω–∞ —Å—Ç—Ä–µ—Å–∞')
  }

  // Cortisol specific
  if (input.cortisol !== undefined && input.cortisol > 18) {
    recs.push('‚ö†Ô∏è –í–∏—Å–æ–∫–∏—è—Ç –∫–æ—Ä—Ç–∏–∑–æ–ª (—Å—Ç—Ä–µ—Å) –Ω–∞–º–∞–ª—è–≤–∞ —Ç–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω. –§–æ–∫—É—Å: –º–µ–¥–∏—Ç–∞—Ü–∏—è, –∞–¥–∞–ø—Ç–æ–≥–µ–Ω–∏ (–∞—à–≤–∞–≥–∞–Ω–¥–∞), —Å—ä–Ω')
  }

  // LH/FSH specific
  if (input.lh !== undefined && input.lh > 9.3) {
    recs.push('‚ö†Ô∏è –í–∏—Å–æ–∫–∏—Ç–µ LH/FSH –º–æ–≥–∞—Ç –¥–∞ –æ–∑–Ω–∞—á–∞–≤–∞—Ç –ø—ä—Ä–≤–∏—á–Ω–∞ —Ö–∏–ø–æ–≥–æ–Ω–∞–¥–∏–∑—ä–º. –ö–æ–Ω—Å—É–ª—Ç–∏—Ä–∞–π –µ–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥')
  }

  return recs
}

/**
 * Get status color for UI
 */
export function getStatusColor(status: 'optimal' | 'suboptimal' | 'low'): string {
  const colors = {
    optimal: 'bg-emerald-50 border-emerald-200 text-emerald-900',
    suboptimal: 'bg-yellow-50 border-yellow-200 text-yellow-900',
    low: 'bg-red-50 border-red-200 text-red-900'
  }
  return colors[status]
}

/**
 * Calculate progress improvement
 */
export function calculateImprovement(results: LabResult[]): {
  first: number
  last: number
  change: number
  changePercent: number
} | null {
  if (results.length < 2) return null

  const sortedResults = [...results].sort((a, b) =>
    new Date(a.test_date).getTime() - new Date(b.test_date).getTime()
  )

  const first = sortedResults[0].total_t
  const last = sortedResults[sortedResults.length - 1].total_t
  const change = last - first
  const changePercent = (change / first) * 100

  return { first, last, change, changePercent }
}

/**
 * Format date for display
 */
export function formatDate(dateString: string): string {
  const date = new Date(dateString)
  return date.toLocaleDateString('bg-BG', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  })
}

/**
 * Export results to CSV
 */
export function exportToCSV(results: LabResult[]): string {
  const headers = [
    '–î–∞—Ç–∞',
    'Total T (ng/dL)',
    'Free T (pg/mL)',
    'SHBG (nmol/L)',
    'Estradiol (pg/mL)',
    'LH (mIU/mL)',
    'Prolactin (ng/mL)',
    'FSH (mIU/mL)',
    'DHT (pg/mL)',
    'Cortisol (¬µg/dL)',
    '–ë–µ–ª–µ–∂–∫–∏'
  ]

  const rows = results.map(r => [
    r.test_date,
    r.total_t,
    r.free_t || '',
    r.shbg || '',
    r.estradiol || '',
    r.lh || '',
    r.prolactin || '',
    r.fsh || '',
    r.dht || '',
    r.cortisol || '',
    r.notes || ''
  ])

  const csv = [headers, ...rows]
    .map(row => row.map(cell => `"${cell}"`).join(','))
    .join('\n')

  return csv
}
